q:=4; //enter alphabet
length:=25; //enter length
b:=2; // shift constant
dimcap:=50;
n:=length;


//Declare shift constant and field 
if q eq 4 then
  P<y> := PolynomialRing(GF(2));
  F<A> := ext<GF(2)|y^2+y+1>;
  b:=b-1;
  a:= A^b;
elif q eq 8 then
  P<y> := PolynomialRing(GF(2));
  F<A> := ext<GF(2)|y^3+y+1>;
  a:= A;
elif q eq 9 then
  P<y> := PolynomialRing(GF(3));
  F<A> := ext<GF(3)|y^2+2*y+2>;
  a:= A^b;
else
  F:= GF(q);
  a:= F!b;
end if;

r:= Order(a);
p:=Characteristic(F);
P<x>:=PolynomialRing(F);
n_prime:=length;
t:=0;
f:=P!(x^n-a);
//gets the highest power of prime that divides n.
while ((n_prime) mod (p)) eq 0 do
  n_prime := n_prime div p;
  t:=t+1;
end while;
power:=p^t;

extension:=n_prime*r;
//Extend field to find root of unity
if extension eq 1 then
  EF:= F;
else
  exten:=Order(q,extension);
  EF<A>:=RandomExtension(F,exten);
end if;

EP<x>:=PolynomialRing(EF);
rou:=RootOfUnity(n_prime*r,EF);

polys:=[];
dimensi:=[];

AllCycs:=[]; //Stores elements "used" in previously made cyc. cosets
ocosets:=[]; //Stores all cyc. cosets

//generate elements set
elements:=[];
for i in [0..n_prime-1] do
  Append(~elements,((1+i*r) mod (n_prime*r)));
end for;

for check in elements do
  if check in AllCycs then
    continue;
  end if;
  ocoset:=[]; //our current cyclotomic coset
  ocoset[1]:=check;
  pr:=((q*check) mod (extension));
  //generates all elements of the cyc coset
  while pr ne ocoset[1] do
    Append(~ocoset,((pr) mod (extension)));
    pr:=((pr*q) mod (extension));
  end while;
  Sort(~ocoset);
  Append(~ocosets, ocoset);
  for i:=1 to #ocoset do
    Append(~AllCycs,ocoset[i]);
  end for;
end for;
//By this point, we have ocosets, which contains cosets but the first element is the least element
ocosets;
//Find all combinations of cyclotomic cosets
totalnum:=(power+1)^#ocosets-2; //Total number of divisors or unions of cyclotomic cosets
totalnum;
pocosets:=[]; //possible cosets
for num in [1..totalnum] do
  pocotemp:=[]; //possible coset temporary
  tempnum:=num;
  j:=1;
  entnum:=0;
  //This loop generates a unique combination of cosets from a given num between 1 and the total number of possible coset combinations

  //TODO: clean up this loop
  //This loop generates a union of cyc cosets
  while tempnum gt 0 do
    modval:=((tempnum) mod (power+1)); //modval is the number of times the coset appears in the union
    if modval ne 0 then
      for z:=1 to modval do
        for i:=1 to #ocosets[j] do
          pocotemp[entnum+(z-1)*#ocosets[j]+i]:=ocosets[j][i];  
        end for;
      end for;
      entnum:=entnum+#ocosets[j]*modval; //Just sets the index position of the next coset in the union
    end if;
    tempnum:=tempnum div (power+1);
    j:=j+1; //j is which coset we're looking at
  end while;

  //Check for linear maps between the unions before adding to pocosets list
  if #pocotemp le dimcap or length-#pocotemp le dimcap then //the number of elements in pocotemp is equal to the degree of the generator polynomial
    stored:=0; //the parameter to check a map is
    k:=1; // k is the counter for going through pocosets
    while k le #pocosets and stored eq 0 do
      if #pocotemp eq #pocosets[k] then //they must have the same number of elements for a map to exist between them
        stored2:=-1;
        coef:=1;
        while stored eq 0 and coef lt n_prime do
          if GCD(coef,length) eq 1 then
            const:=0;
            while const lt n_prime and stored2 eq -1 do
              isEquiv:= false;

              for j:=1 to #pocosets[k] do 
              //check for ontoness
              //the map is already one to one so if it's onto then its a map
              //and therefore will produce equivalent generators 
              //so we throw it in the trash where it belongs
                if Multiplicity(pocosets[k],pocosets[k][j]) ne Multiplicity(pocotemp,((pocosets[k][j]*coef+const) mod (n_prime))) then
                  isEquiv:=true;
                  break;
                end if;
              end for;
              if not isEquiv then
                stored:=coef;
                stored2:=const;
              end if;
              const+:=1;
            end while;
          end if;
          coef:=coef+1;
        end while;
      end if;
      k:=k+1;
    end while;
    //if it wasnt equivalent to anything, add it to pocosets. Then generate a polynomial for it, add it to polys, and find its generator and add that to dimensi.
    if stored eq 0 then 
    //TODO: Exclude sets that are just zeroes.
      Append(~pocosets,pocotemp);
      poly:=EP!1;
      for i:=1 to #pocotemp do
        poly:=poly*(x-rou^pocotemp[i]);
      end for;
      poly;
      f mod poly;
      poly:=P!poly;
      poly;
      f mod poly;
      Append(~polys,poly);
      dim:=length-Degree(poly);
      Append(~dimensi,dim);
      end if;
    end if;
end for;

//Factorization(f);